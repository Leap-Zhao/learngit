
git仓库内容:
1.py
2.py
3.py

情况:
  情况1:第1个小时我对1.py作了一些修改,但还未add,第2个小时我想恢复到修改之前的情况
  操作:
    可先用git diff 查看修改的地方,之后确认要恢复时用git checkout -- 1.py
  情况2:第1个小时我对1.py作了一些修改,并且add到了暂存区,之后我又做了第2次修改,第2个小时我想恢复到刚add到暂存区时的情况
  操作:
    同上一种情况
  参考: 
  
 
==========================
=======分支branch==========
==========================


创建一个分支dev
git branch dev
切换到dev分支上
git checkout dev

情况:
  我想查看当前所有分支对应远程哪个分支,对应远程是落后还是提前了几个commit,如何做?
操作:
  用 git branch -vv
    
情况:
  我想从远程上拉取一个分支,但我不知道分支的准确名称
操作1:
  先用 git branch -v 命令查看所有远程分支
  再用 git checkout -b 本地分支名x origin/远程分支名x  拉取远程分支并创建本地分支
操作2:
  git fetch origin 远程分支名x:本地分支名x
  使用该方式会在本地新建分支x，但是不会自动切换到该本地分支x，需要手动checkout。
参考: https://blog.csdn.net/tterminator/article/details/52225720
  


情况:
  第一天我在dev上修改了1.py,添加了4.py,
  第二天我将master分支上最新内容pull下来,发现有别的同事改了2.py和3.py,而我的dev分支上的2.py和3.py还是原来版本的,怎么将2.py与3.py与最新master保持同步而又不影响我改动的1.py与4.py呢?
操作1:
  1.切换到dev分支 git checkout dev
  2.将master分支上的东西merge到dev分支上  git merge master
操作2:
  1.切换到dev分支
  2.执行 git rebase -i master
  # 该命令将开发分支的修改打包成补丁，然后把开发分支的最初版本与master主分支合并，
  # 同样因为开发分支的最初版本与master主分支属于同一条分支，所以可以快速合并，
  # 最后将修改补丁加入合并后的分支中。
  # 该命令的-i会进入交互模式，交互模式为vim文本文件，在文本文件中，
  # 除去#注释，从上到下依次为补丁的所有commit记录，按i进入文本编辑模式，
  # 将commit_id前面的pick修改为不同的关键字会有不同的效果，其中常用的有
  # p-默认选择该commit，s-将该commit合并到上一个commit中，后续会重新编辑commit记录
  # f-同s，但commit记录会丢失。
  # 将多个commit合并成几个精简的commit之后，按ESC进入命令模式，输入:wq保存返回，
  # 随后进入rebase合并过程。如果遇到冲突，修改冲突提示的文件，使用git add命令，
  # 然后再git rebase --continue继续合并。
  # 参考: https://blog.csdn.net/q449560173/article/details/65628261
注意:
  如果在 git rebase 过程中出现问题或错误怎么办?
  执行git rebase --abort 
  因为rebase将你转移到非分支区域，所以你必须使用git rebase --abort命令中止最后一个rebase，并检出一个分支去分支并开始新的rebound
  参考:https://stackoverflow.com/questions/8895915/git-rebase-and-deleted-rebasing-branches-causing-interactive-rebase-already-sta?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa

